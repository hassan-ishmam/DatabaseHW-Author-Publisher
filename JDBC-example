/**
 * @author Anthony Diaz
 * @author Hassan Ishmam
 * @author Jon Ham
 * March 19, 2019
 * Purpose: This is the main method of the project. It operates on the database
 *          by adding, deleting and modifying information
 * Inputs:  It asks the user what they would like to do with the database
 * Outputs: Depending on the user input, it operates on the database and displays
 *          the output
 **/
 
package jdbcproject;
import java.sql.*;
import java.util.Scanner;


public class JDBCProject {
    //Variables that will be using through this program.
    static String DBNAME;
    //This is the specification for the printout that I'm doing:
    //each % denotes the start of a new field.
    //The - denotes left justification.
    //The number indicates how wide to make the field.
    //The "s" denotes that it's a string.  All of our output in this test are
    //strings, but that won't always be the case.
    static final String displayFormat="%-20s\n";
    static final String displayFormatPubData="%-20s%-50s%-20s%-30s%-20s\n";
    static final String displayFormatFull="%-20s%-20s%-20s%-20s%-20s\n";
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";

    public static String noInput(String userInput) {
        if (userInput == null || userInput.length() == 0)
            return "Not found.";
        else
            return userInput;
    }
    
    //Main function
    public static void main(String[] args) {
        //Get the input for the name of the database and find it.
        Scanner in = new Scanner(System.in);
        System.out.print("Name of the database (not the user account): ");
        DBNAME = in.nextLine();
        DB_URL = DB_URL + DBNAME;
        
        //Connection, statement, and prepared statement that we will be using.
        Connection conn = null; 
        Statement stmt =null; 
        PreparedStatement pstmt = null;
        
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");

            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL);
            
            //Main menu
            boolean invalid = true;
            while(invalid){
                System.out.println("1. List all writing groups\n"
                        + "2. Select group\n" //FIX LONELYLOGGERS
                        + "3. List all publishers\n"
                        + "4. Select publisher\n"
                        + "5. List all book titles\n"
                        + "6. Select book\n"
                        + "7. Insert a new book\n"
                        + "8. Insert new publisher and update\n"
                        + "9. Remove book");
                
                //Validate the user input.
                int user_input;
                do {
                    System.out.println("\nPlease enter a valid number from the menu: ");
                    while (!in.hasNextInt()) {
                        System.out.println("\nPlease enter an integer number: ");
                        in.next();
                    }
                    user_input = in.nextInt();
                } while (user_input < 1 || user_input > 9);
                in.nextLine();
                switch(user_input){
                    case 1:
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM writing_groups";
                        ResultSet rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                            //Retrieve by column name
                            String group_name = rs.getString("group_name");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(group_name));
                        }
                        rs.close();
                        stmt.close();
                        System.out.println();
                        break;
                    case 2:
                        sql = "SELECT * FROM writing_groups NATURAL JOIN books WHERE group_name= ?";
                        System.out.println("Select Group Name:\n");
                        String user_string = in.nextLine();
                        
                        pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, user_string);
                        rs = pstmt.executeQuery();
                        System.out.printf(displayFormatFull, "Group Name", "Head Writer", "Year Formed", "Subject", "Book Title");
                        while (rs.next()) {
                            String group_name = rs.getString("group_name");
                            String head_writer = rs.getString("head_writer");
                            String year_formed = rs.getString("year_formed");
                            String subject = rs.getString("subject");
                            String book_title = rs.getString("book_title");
                            //Display values
                            
                            System.out.printf(displayFormatFull,
                            noInput(group_name), noInput(head_writer), noInput(year_formed), noInput(subject), noInput(book_title));
                        }
                        rs.close();
                        pstmt.close();
                        System.out.println();
                        break;
                    case 3:
                        stmt = conn.createStatement();
                        
                        sql = "SELECT * FROM publishers";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                            //Retrieve by column name
                            String group_name = rs.getString("publisher_name");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(group_name));
                        }
                        rs.close();
                        stmt.close();
                        System.out.println();
                        break;
                    case 4:
                        sql = "SELECT * FROM publishers NATURAL JOIN books WHERE publisher_name= ?";
                        System.out.println("Select Publisher Name:\n");
                        user_string = in.nextLine();
                        pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, user_string);
                        rs = pstmt.executeQuery();
                        System.out.printf(displayFormatPubData, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email", "Book Title");
                        while (rs.next()) {
                            String publisher_name = rs.getString("publisher_name");
                            String pub_address = rs.getString("pub_address");
                            String pub_phone = rs.getString("pub_phone");
                            String pub_email = rs.getString("pub_email");
                            String book_title = rs.getString("book_title");
                            //Display values
                            System.out.printf(displayFormatPubData,
                            noInput(publisher_name), noInput(pub_address), noInput(pub_phone), noInput(pub_email), noInput(book_title));
                        }
                        rs.close();
                        pstmt.close();
                        System.out.println();
                        break;
                    case 5:
                        stmt = conn.createStatement();
                        sql = "SELECT * FROM books";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                            //Retrieve by column name
                            String group_name = rs.getString("book_title");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(group_name));
                        }
                        rs.close();
                        stmt.close();
                        System.out.println();
                        break;
                    case 6:
                        sql = "SELECT * FROM books NATURAL JOIN Publishers NATURAL JOIN writing_groups WHERE book_title = ?";
                        System.out.println("Select Book Title Name:\n");
                        user_string = in.nextLine();
                        pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, user_string);
                        rs = pstmt.executeQuery();
                        System.out.printf(displayFormatFull, "Book Title", "Group Name", "Publisher Name", "Year Published", "Number of Pages");
                        while (rs.next()) {
                            String book_title = rs.getString("book_title");
                            String group_name = rs.getString("group_name");
                            String publisher_name = rs.getString("publisher_name");
                            String year_published = rs.getString("year_published");
                            String number_pages = rs.getString("number_pages");
                            //Display values
                            System.out.printf(displayFormatFull,
                            noInput(book_title), noInput(group_name), noInput(publisher_name), noInput(year_published), noInput(number_pages));
                        }
                        rs.close();
                        pstmt.close();
                        System.out.println();
                        break;
                    case 7:
                        System.out.print("Enter book title: ");
                        String b_title= in.nextLine();
                        System.out.print("Enter Year Published: ");
                        int year_published = in.nextInt();
                        System.out.print("Enter Number of pages: ");
                        int number_pages = in.nextInt();
                        in.nextLine();
                        
                        
                        //Getting the publisher
                        
                        stmt = conn.createStatement();
                        System.out.println();
                        String sqlForPublishers = "SELECT * FROM publishers";
                        rs = stmt.executeQuery(sqlForPublishers);
                        while (rs.next()) {
                         
                            //Retrieve by column name
                            String pub = rs.getString("publisher_name");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(pub));
                        }
                        
                        rs.close();
                        
                        System.out.print("\nSelect from the publishers above: "); 
                        String publisher = in.nextLine();
      
                        //Getting the writing group
                        
                        String sqlForWritingGroups = "SELECT * FROM writing_groups";
                        rs = stmt.executeQuery(sqlForWritingGroups);
                        while (rs.next()) {
                            //Retrieve by column name
                            String wGroup = rs.getString("group_name");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(wGroup));
                        }
                        
                        rs.close();
                       
                        
                        System.out.print("\nSelect one of the Working Groups: ");
                        String writingGroup = in.nextLine();
                        
                        //Adding New Book to the table
                        
                        sql = "INSERT INTO books VALUES(?,?,?,?, ?)";
                        pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, b_title);
                        pstmt.setString(2, writingGroup);
                        pstmt.setString(3, publisher);
                        pstmt.setInt(4, year_published);
                        pstmt.setInt(5, number_pages);
                        pstmt.executeUpdate();
                        pstmt.close();
                        System.out.println();
                        break;
                    case 8:
                        //Enter the data for the new publisher.
                        
                        System.out.println("Please enter the publisher's name: ");
                        String publisher_name = in.nextLine();
                        System.out.println("Please enter the publisher's address: ");
                        String publisher_address = in.nextLine();
                        System.out.println("Please enter the publisher's phone: ");
                        String publisher_phone = in.nextLine();
                        System.out.println("Please enter the publisher's email: ");
                        String publisher_email = in.nextLine();
                        
                        //Inserts data into table
                        sql = "INSERT INTO publishers VALUES(?,?,?,?)";
                        pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, publisher_name);
                        pstmt.setString(2, publisher_address);
                        pstmt.setString(3, publisher_phone);
                        pstmt.setString(4, publisher_email);
                        pstmt.executeUpdate();
                        pstmt.close();
                        
                        //Getting the publisher
                        stmt = conn.createStatement();
                        System.out.println();
                        sqlForPublishers = "SELECT * FROM publishers";
                        rs = stmt.executeQuery(sqlForPublishers);
                        while (rs.next()) {                       
                            //Retrieve by column name
                            String pub = rs.getString("publisher_name");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(pub));
                        }                        
                        rs.close();                        
                        System.out.print("\nSelect from the publishers above to delete: "); 
                        publisher = in.nextLine();
                        
                        //Replaces the old publisher with the new publisher 
                        String replaceSql = "UPDATE books SET publisher_name = ? WHERE publisher_name = ?";
                        pstmt = conn.prepareStatement(replaceSql);
                        pstmt.setString(1, publisher_name);
                        pstmt.setString(2, publisher);
                        pstmt.executeUpdate();
                        pstmt.close();
                        
                        //Deletes the old publisher
                        String deleteSql = "DELETE FROM publishers WHERE publisher_name = ?";
                        pstmt = conn.prepareStatement(deleteSql);
                        pstmt.setString(1, publisher);
                        pstmt.executeUpdate();
                        pstmt.close();
                        System.out.println();
                        break;
                    case 9:
                    //Displays old list of books
                      System.out.println("List of books: ");
                        stmt = conn.createStatement();
                        sql = "SELECT * FROM books";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                            //Retrieve by column name
                            String group_name = rs.getString("book_title");
                            //Display values
                            System.out.printf(displayFormat,
                                    noInput(group_name));
                        }
                        rs.close();
                        
                        //Asks the user which book to delete
                        
                        System.out.println("Enter the name of the book to delete: ");
                        String bookName = in.nextLine();
                        
                        
                        deleteSql = "DELETE FROM books WHERE book_title = ?";
                        pstmt = conn.prepareStatement(deleteSql);
                        pstmt.setString(1, bookName);
                        pstmt.executeUpdate();
                        pstmt.close();
                        System.out.println();
                        
                        //Displays new list of books 
                        System.out.println("New list of books: ");
                        stmt = conn.createStatement();
                        sql = "SELECT * FROM books";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                            //Retrieve by column name
                            String group_name = rs.getString("book_title");
                            //Display values
                            System.out.printf(displayFormat,
                                    dispNull(group_name));
                        }
                        rs.close();
                        System.out.println();
                        
                        break;
                    default:
                        break;
                                
                }
            }
        //Catch any exceptions.
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        System.out.println("The program has ended. Have a nice day.");
    }
}
